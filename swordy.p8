pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

-- utils
btns={
 l=‚¨ÖÔ∏è,
 r=‚û°Ô∏è,
 u=‚¨ÜÔ∏è,
 d=‚¨áÔ∏è,
 atk=üÖæÔ∏è,
 def=‚ùé,
}

function bound(v, low, high)
 return min(max(v, low), high)
end

function sscoord(s)
 return {
  x = (s%16)*8,
  y = flr(s/16)*8
 }
end

function forbox(sx, sy, w, h, callback)
  for x = sx, sx+w do
   for y = sy, sy+h do
    if callback(x, y) then
     return
    end
   end
  end
end

-- class maker
function class(proto, base)
 proto = proto or {}
 proto.__index = proto
 setmetatable(proto, {
  __index = base,
  __call = function(cls, ...)
   local self = setmetatable({
    type=proto
   }, proto)
   -- self.super = base
   if(self.init) self:init(...)
   return self
  end
 })
 proto.subclass = function(subproto)
  return class(subproto, proto)
 end
 return proto
end

-- mob definition
mob = class({
 x=0, y=0, flipped=false,
 sprite=0,
})
mobs = {}

function mob:init(x, y)
 self.x = x
 self.y = y
 add(mobs, self)
end

function mob:draw()
 spr(self.sprite, self.x, self.y, 1, 1, self.flipped, false)
end

function mob:update()
end

-- player
player = mob.subclass({
 sprite=1,
 swordsprite=17,
 joincolor=14,
 joinrepl=6
})

function player:init(p, x, y)
 -- self.super.init(self, x, y)
 mob.init(self, x, y)
 self.p = p-1
 self.swoff = {x=0, y=0}

 local hand = sscoord(self.sprite)
 forbox(hand.x, hand.y, 8, 8, function(x,y)
   if sget(x,y) == self.joincolor then
    self.swoff = {x=x-hand.x, y=y-hand.y}
    return 1
   end
 end)

 local hilt = sscoord(self.swordsprite)
 forbox(hilt.x, hilt.y, 8, 8, function(x,y)
   if sget(x,y) == self.joincolor then
    self.swoff.x = self.swoff.x - (x-hilt.x)
    self.swoff.y = self.swoff.y - (y-hilt.y)
    return 1
   end
 end)
end

function player:update()
 if btn(btns.l, self.p) then
  self.x = self.x - self.speed
  self.flipped = true
 end
 if btn(btns.r, self.p) then
  self.x = self.x + self.speed
  self.flipped = false
 end
 self.x = bound(self.x, 0, 120)

 if btn(btns.u, self.p) then
  self.y = self.y - self.speed
 end
 if btn(btns.d, self.p) then
  self.y = self.y + self.speed
 end
 self.y = bound(self.y, 58, 120)
end

function player:draw()
 pal(self.joincolor, self.joinrepl)
 -- self.super.draw(self)
 mob.draw(self)
 local swx = self.swoff.x
 if self.flipped then
  swx = -swx
 end
 spr(self.swordsprite, self.x + swx, self.y + self.swoff.y, 1, 1, self.flipped, false)
 pal()
end

-- specific players

blueplayer = player.subclass({
  sprite=1,
  swordsprite=17,
  speed=2
})

orangeplayer = player.subclass({
  sprite=33,
  swordsprite=49,
  speed=1
})

-- system callbacks

function _init()
 p1 = blueplayer(1, 10, 70)
 p2 = orangeplayer(2, 10, 82)
end

function _update()
 for m in all(mobs) do
  m:update()
 end
end

function draw_bg()
	rectfill(0,0,128,128,12)
	rectfill(0,64,128,128,15)
end

function _draw()
	draw_bg()
 for m in all(mobs) do
  m:draw()
 end
end

__gfx__
00000000001111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700001990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000cccccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000770000ccccce00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000cccc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055cc5500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000055005500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000499405550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000499400e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000494000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000022aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000004429aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044499e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000229944900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000209999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044994400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000044004400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000d60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000006666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000e60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
